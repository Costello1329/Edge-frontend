export enum LocaleType {
  ru_RU = "ru_RU",
  en_GB = "en_GB"
}

export interface Locale {
  copyrightText: string,
  allRightsReserved: string,
  mainLayerTitle: string,
  mainLayerParagraphs: string[],
  mainLayerCompaniesTitle: string,
  viewVacancies: string,
  putVacancy: string,
  joinOurTelegram: string,
  home: string,
  vacancies: string,
  vacancy: string,
  postVacancy: string,
  watchAllVacancies: string,
  telegramGroupName: string,
  russian: string,
  english: string,
  filter: string,
  level: string,
  stack: string,
  location: string,
  city: string,
  offer: string,
  all: string,
  remote: string,
  remoteOnly: string,
  vacancySkillFrontend: string,
  vacancySkillBackend: string,
  vacancySkillFullstack: string,
  vacancySkillDevOps: string,
  vacancySkillAndroid: string,
  vacancySkilliOS: string,
  vacancySkillMobile: string,
  vacancySkillDesktop: string,
  vacancySkillDataScience: string,
  vacancySkillSecurityEngineer: string,
  respondInTelegram: string,
  company: string,
  companyName: string,
  companyIndustry: string,
  companyWebsite: string,
  locationCountry: string,
  locationCity: string,
  candidate: string,
  candidateSkill: string,
  candidateLevel: string,
  candidateStack: string,
  salaryFrom: string,
  salaryTo: string,
  description: string,
  contacts: string,
  contactsEmail: string,
  contactsPhone: string,
  EmptyValidationError: string,
  ValidationErrorCompanyProhibitedSymbols: string,
  ValidationErrorCompanyTooShort: string,
  ValidationErrorCompanyTooLong: string,
  ValidationErrorCompanySideSpaces: string,
  ValidationErrorCompanyDoubledSpaces: string,
  ValidationErrorSalaryNotOnlyNumbers: string,
  ValidationErrorSalaryTooSmallNumber: string,
  ValidationErrorSalaryTooBigNumber: string,
  ValidationErrorSalaryLessThan: (bound: number) => string,
  ValidationErrorStartsNotWithSchema: string,
  ValidationErrorSpaces: string,
  ValidationErrorSalaryNotEmail: string,
  ValidationErrorSalaryNotTelegram: string,
  ValidationErrorSalaryNotPhone: string,
  vacancyPostFormCompanyDescription: string,
  vacancyPostFormCandidateDescription: string,
  vacancyPostFormOfferDescription: string
}

export const ru_RU: Locale = {
  copyrightText: "© 2020 Allisto",
  allRightsReserved: "Все права защищены.",
  mainLayerTitle: "Кто мы",
  mainLayerParagraphs: [
    "Мы – крупный портал, размещающий лучшие вакансии в сфере IT. \
    Коллегам мы предоставляем доступ к лучшим предложениям на рынке, \
    рекрутерам — таргетированное размещение.",
    "Все вакансии проходят тщательную валидацию на предмет соответствия \
    правилам портала. Вакансии крупных компаний размещаются бесплатно \
    в кратчайшие сроки."
  ],
  mainLayerCompaniesTitle: "Нам доверяют",
  viewVacancies: "Посмотреть",
  putVacancy: "Разместить",
  joinOurTelegram: "Присоединяйтесь к нам в Telegram:",
  home: "Домой",
  vacancies: "Вакансии",
  vacancy: "Вакансия",
  postVacancy: "Разместить",
  watchAllVacancies: "Посмотреть все",
  telegramGroupName: "@sns_deanon",
  russian: "Русский",
  english: "English",
  filter: "Фильтр",
  level: "Уровень",
  stack: "Область",
  location: "Локация",
  city: "Город",
  offer: "Оффер",
  all: "Все",
  remote: "Удаленно",
  remoteOnly: "Только удаленно",
  vacancySkillFrontend: "Frontend",
  vacancySkillBackend: "Backend",
  vacancySkillFullstack: "Fullstack",
  vacancySkillDevOps: "Dev Ops",
  vacancySkillAndroid: "Android",
  vacancySkilliOS: "iOS",
  vacancySkillMobile: "Mobile",
  vacancySkillDesktop: "Desktop",
  vacancySkillDataScience: "Data Science",
  vacancySkillSecurityEngineer: "Security Engineer",
  respondInTelegram: "Откликнуться в Telegram",
  company: "Компания",
  companyName: "Название",
  companyIndustry: "Индустрия",
  companyWebsite: "Сайт",
  locationCountry: "Страна",
  locationCity: "Город",
  candidate: "Кандидат",
  candidateSkill: "Область",
  candidateLevel: "Уровень",
  candidateStack: "Стэк",
  salaryFrom: "От",
  salaryTo: "До",
  description: "Описание",
  contacts: "Контакты",
  contactsEmail: "Почта",
  contactsPhone: "Телефон",
  EmptyValidationError: "Обязательное поле",
  ValidationErrorCompanyProhibitedSymbols: "Запрещенный символ",
  ValidationErrorCompanyTooShort: "Слишком короткая строка",
  ValidationErrorCompanyTooLong: "Слишком длинная строка",
  ValidationErrorCompanySideSpaces: "Пробелы в начале и конце строки запрещены",
  ValidationErrorCompanyDoubledSpaces: "Сдвоенные пробелы запрещены",
  ValidationErrorSalaryNotOnlyNumbers: "Разрешены только числа",
  ValidationErrorSalaryTooSmallNumber: "Слишком маленькое число",
  ValidationErrorSalaryTooBigNumber: "Слишком большое число",
  ValidationErrorSalaryLessThan:
    (bound: number): string => `Не должно быть меньше ${bound}`,
  ValidationErrorStartsNotWithSchema: "Должно начинаться с http:// или https://",
  ValidationErrorSpaces: "Пробелы запрещены",
  ValidationErrorSalaryNotEmail: "Неверный формат email",
  ValidationErrorSalaryNotTelegram: "Неверный формат",
  ValidationErrorSalaryNotPhone: "Неверный формат. Пример: +7 999 018-99-33",
  vacancyPostFormCompanyDescription:
    "Указание ссылки на специальную страницу с детальной информацией \
    по вакансии увеличивает шансы на подбор квалифицированного специалиста.",
  vacancyPostFormCandidateDescription:
    "Рекоендуем перечислить требуемый стек технологий. Это поможет \
    в таргетинге необходимого специалиста.",
  vacancyPostFormOfferDescription:
    "Указывайте честную зарплатную вилку и пишите подробное описание. \
    Откровенность – залог установления доверительных отношений с обеих сторон."
};

export const en_GB: Locale = {} as Locale;

// export const en_GB: Locale = {};
